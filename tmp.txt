_start:
#     li x5, 0
addi x5, x0, 0x0
jal x0, L_jal_fwd_target   # Jump forward
#     li x31, 999                
addi x31, x0, 0x0
ori x31, x31, 0x3e7
jal x0, L_jal_fwd_verify
L_jal_fwd_target:
#     li x31, 1                  
addi x31, x0, 0x0
ori x31, x31, 0x1
L_jal_fwd_verify:
#     li x30, 1                  
addi x30, x0, 0x0
ori x30, x30, 0x1
#     li x11, 1
addi x11, x0, 0x0
ori x11, x11, 0x1
#     li x11, 0
addi x11, x0, 0x0
jal x0, L_jal_back_setup
L_jal_back_target:
#     li x31, 2                  
addi x31, x0, 0x0
ori x31, x31, 0x2
jal x0, L_jal_back_verify
L_jal_back_setup:
jal x0, L_jal_back_target  # Jump backward
#     li x31, 888                
addi x31, x0, 0x0
ori x31, x31, 0x378
L_jal_back_verify:
#     li x30, 2                  
addi x30, x0, 0x0
ori x30, x30, 0x2
#     li x11, 1
addi x11, x0, 0x0
ori x11, x11, 0x1
#     li x11, 0
addi x11, x0, 0x0
jal x7, L_jal_link_target  # Jump forward, save PC+4 to x7
#     li x31, 777
addi x31, x0, 0x0
ori x31, x31, 0x309
jal x0, L_jal_link_verify
L_jal_link_target:
#     li x31, 3                  
addi x31, x0, 0x0
ori x31, x31, 0x3
L_jal_link_verify:
#     li x30, 3                  
addi x30, x0, 0x0
ori x30, x30, 0x3
#     li x11, 1
addi x11, x0, 0x0
ori x11, x11, 0x1
#     li x11, 0
addi x11, x0, 0x0
auipc x5, 0                # x5 = PC of auipc
addi x5, x5, 20            # x5 = PC + 20 = Address of L_jalr_target_1 (jalr=4, li=4, j=4, li=4 -> total 16 to skip)
jalr x0, x5, 0             # Jump to address in x5
#     li x31, 666
addi x31, x0, 0x0
ori x31, x31, 0x29a
jal x0, L_jalr_zero_verify
L_jalr_target_1:
#     li x31, 4                  
addi x31, x0, 0x0
ori x31, x31, 0x4
L_jalr_zero_verify:
#     li x30, 4
addi x30, x0, 0x0
ori x30, x30, 0x4
#     li x11, 1
addi x11, x0, 0x0
ori x11, x11, 0x1
#     li x11, 0
addi x11, x0, 0x0
auipc x5, 0                # x5 = PC of auipc (A)
addi x5, x5, 8             # x5 = A + 8 (Base address for jump)
jalr x0, x5, 16            # Jump to x5 + 16 = (A+8)+16 = A+24 (target)
#     li x31, 555
addi x31, x0, 0x0
ori x31, x31, 0x22b
jal x0, L_jalr_pos_verify
L_jalr_target_2:               # Label expected at A + 24
#     li x31, 5                  
addi x31, x0, 0x0
ori x31, x31, 0x5
L_jalr_pos_verify:
#     li x30, 5
addi x30, x0, 0x0
ori x30, x30, 0x5
#     li x11, 1
addi x11, x0, 0x0
ori x11, x11, 0x1
#     li x11, 0
addi x11, x0, 0x0
jal x0, L_jalr_neg_setup_2
L_jalr_neg_target_2:           # Target Label: Execution should land here. PC = T
#     li x31, 6                  
addi x31, x0, 0x0
ori x31, x31, 0x6
jal x0, L_jalr_neg_verify_2
L_jalr_neg_setup_2:
auipc x5, 0                # x5 = PC of auipc (A)
addi x5, x5, 12            # x5 = A + 12 (Points 4 bytes past the jalr instruction)
jalr x0, x5, -20           # Jump target = (A+12) - 20 = A - 8 (Should hit the label)
#     li x31, 444                
addi x31, x0, 0x0
ori x31, x31, 0x1bc
L_jalr_neg_verify_2:
#     li x30, 6                  
addi x30, x0, 0x0
ori x30, x30, 0x6
#     li x11, 1
addi x11, x0, 0x0
ori x11, x11, 0x1
#     li x11, 0
addi x11, x0, 0x0
jal ra, sub_function       # Call sub_function, ra = PC + 4 (address of next li x31)
#     li x31, 7                  
addi x31, x0, 0x0
ori x31, x31, 0x7
jal x0, L_jalr_ret_verify
sub_function:
addi x7, x0, 123           # Dummy work
jalr x0, x1, 0
#     li x31, 333                
addi x31, x0, 0x0
ori x31, x31, 0x14d
L_jalr_ret_verify:
#     li x30, 7                  
addi x30, x0, 0x0
ori x30, x30, 0x7
#     li x11, 1
addi x11, x0, 0x0
ori x11, x11, 0x1
#     li x11, 0
addi x11, x0, 0x0
auipc x6, 0                # x6 = PC of auipc (A)
addi x6, x6, 24            # x6 = A + 24 = Approx address of L_jalr_lsb_target_GOOD
addi x6, x6, -4            # Correct offset: x6 = A + 20 = Address of L_jalr_lsb_target_GOOD
addi x5, x6, -1            # x5 = Target - 1 (Odd Address)
jalr x0, x5, 1
#     li x31, 99                 
addi x31, x0, 0x0
ori x31, x31, 0x63
jal x0, L_jalr_lsb_verify_2
L_jalr_lsb_target_GOOD:        # Expected Target (Address = A + 20)
#     li x31, 8                  
addi x31, x0, 0x0
ori x31, x31, 0x8
L_jalr_lsb_verify_2:
#     li x30, 8                  
addi x30, x0, 0x0
ori x30, x30, 0x8
#     li x11, 1
addi x11, x0, 0x0
ori x11, x11, 0x1
#     li x11, 0
addi x11, x0, 0x0
